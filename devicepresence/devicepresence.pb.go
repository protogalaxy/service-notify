// Code generated by protoc-gen-go.
// source: devicepresence.proto
// DO NOT EDIT!

/*
Package devicepresence is a generated protocol buffer package.

It is generated from these files:
	devicepresence.proto

It has these top-level messages:
	DevicesRequest
	Device
*/
package devicepresence

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type Device_Type int32

const (
	Device_WS Device_Type = 0
)

var Device_Type_name = map[int32]string{
	0: "WS",
}
var Device_Type_value = map[string]int32{
	"WS": 0,
}

func (x Device_Type) String() string {
	return proto.EnumName(Device_Type_name, int32(x))
}

type Device_Status int32

const (
	Device_ONLINE  Device_Status = 0
	Device_OFFLINE Device_Status = 1
)

var Device_Status_name = map[int32]string{
	0: "ONLINE",
	1: "OFFLINE",
}
var Device_Status_value = map[string]int32{
	"ONLINE":  0,
	"OFFLINE": 1,
}

func (x Device_Status) String() string {
	return proto.EnumName(Device_Status_name, int32(x))
}

type DevicesRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
}

func (m *DevicesRequest) Reset()         { *m = DevicesRequest{} }
func (m *DevicesRequest) String() string { return proto.CompactTextString(m) }
func (*DevicesRequest) ProtoMessage()    {}

type Device struct {
	Id     string        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type   Device_Type   `protobuf:"varint,2,opt,name=type,enum=devicepresence.Device_Type" json:"type,omitempty"`
	UserId string        `protobuf:"bytes,3,opt,name=user_id" json:"user_id,omitempty"`
	Status Device_Status `protobuf:"varint,4,opt,name=status,enum=devicepresence.Device_Status" json:"status,omitempty"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}

func init() {
	proto.RegisterEnum("devicepresence.Device_Type", Device_Type_name, Device_Type_value)
	proto.RegisterEnum("devicepresence.Device_Status", Device_Status_name, Device_Status_value)
}

// Client API for PresenceManager service

type PresenceManagerClient interface {
	GetDevices(ctx context.Context, in *DevicesRequest, opts ...grpc.CallOption) (PresenceManager_GetDevicesClient, error)
}

type presenceManagerClient struct {
	cc *grpc.ClientConn
}

func NewPresenceManagerClient(cc *grpc.ClientConn) PresenceManagerClient {
	return &presenceManagerClient{cc}
}

func (c *presenceManagerClient) GetDevices(ctx context.Context, in *DevicesRequest, opts ...grpc.CallOption) (PresenceManager_GetDevicesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PresenceManager_serviceDesc.Streams[0], c.cc, "/devicepresence.PresenceManager/GetDevices", opts...)
	if err != nil {
		return nil, err
	}
	x := &presenceManagerGetDevicesClient{stream}
	if err := x.ClientStream.SendProto(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PresenceManager_GetDevicesClient interface {
	Recv() (*Device, error)
	grpc.ClientStream
}

type presenceManagerGetDevicesClient struct {
	grpc.ClientStream
}

func (x *presenceManagerGetDevicesClient) Recv() (*Device, error) {
	m := new(Device)
	if err := x.ClientStream.RecvProto(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PresenceManager service

type PresenceManagerServer interface {
	GetDevices(*DevicesRequest, PresenceManager_GetDevicesServer) error
}

func RegisterPresenceManagerServer(s *grpc.Server, srv PresenceManagerServer) {
	s.RegisterService(&_PresenceManager_serviceDesc, srv)
}

func _PresenceManager_GetDevices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DevicesRequest)
	if err := stream.RecvProto(m); err != nil {
		return err
	}
	return srv.(PresenceManagerServer).GetDevices(m, &presenceManagerGetDevicesServer{stream})
}

type PresenceManager_GetDevicesServer interface {
	Send(*Device) error
	grpc.ServerStream
}

type presenceManagerGetDevicesServer struct {
	grpc.ServerStream
}

func (x *presenceManagerGetDevicesServer) Send(m *Device) error {
	return x.ServerStream.SendProto(m)
}

var _PresenceManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "devicepresence.PresenceManager",
	HandlerType: (*PresenceManagerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDevices",
			Handler:       _PresenceManager_GetDevices_Handler,
			ServerStreams: true,
		},
	},
}
