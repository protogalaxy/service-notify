// Code generated by protoc-gen-go.
// source: notify.proto
// DO NOT EDIT!

/*
Package notify is a generated protocol buffer package.

It is generated from these files:
	notify.proto

It has these top-level messages:
	SendRequest
	SendReply
*/
package notify

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type SendRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	Data   []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SendRequest) Reset()         { *m = SendRequest{} }
func (m *SendRequest) String() string { return proto.CompactTextString(m) }
func (*SendRequest) ProtoMessage()    {}

type SendReply struct {
}

func (m *SendReply) Reset()         { *m = SendReply{} }
func (m *SendReply) String() string { return proto.CompactTextString(m) }
func (*SendReply) ProtoMessage()    {}

func init() {
}

// Client API for Notifier service

type NotifierClient interface {
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendReply, error)
}

type notifierClient struct {
	cc *grpc.ClientConn
}

func NewNotifierClient(cc *grpc.ClientConn) NotifierClient {
	return &notifierClient{cc}
}

func (c *notifierClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendReply, error) {
	out := new(SendReply)
	err := grpc.Invoke(ctx, "/notify.Notifier/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Notifier service

type NotifierServer interface {
	Send(context.Context, *SendRequest) (*SendReply, error)
}

func RegisterNotifierServer(s *grpc.Server, srv NotifierServer) {
	s.RegisterService(&_Notifier_serviceDesc, srv)
}

func _Notifier_Send_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(SendRequest)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(NotifierServer).Send(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Notifier_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notify.Notifier",
	HandlerType: (*NotifierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Notifier_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
